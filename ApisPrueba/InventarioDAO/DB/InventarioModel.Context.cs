//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventarioDAO.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PruebaEntities : DbContext
    {
        public PruebaEntities()
            : base("name=PruebaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int usp_CreateArticle(string description, Nullable<decimal> price, Nullable<decimal> total_in_shelf, Nullable<decimal> total_in_vault, Nullable<decimal> store_Id)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var total_in_shelfParameter = total_in_shelf.HasValue ?
                new ObjectParameter("Total_in_shelf", total_in_shelf) :
                new ObjectParameter("Total_in_shelf", typeof(decimal));
    
            var total_in_vaultParameter = total_in_vault.HasValue ?
                new ObjectParameter("Total_in_vault", total_in_vault) :
                new ObjectParameter("Total_in_vault", typeof(decimal));
    
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("Store_Id", store_Id) :
                new ObjectParameter("Store_Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateArticle", descriptionParameter, priceParameter, total_in_shelfParameter, total_in_vaultParameter, store_IdParameter);
        }
    
        public virtual int usp_CreateStore(string name, string address)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateStore", nameParameter, addressParameter);
        }
    
        public virtual int usp_DeleteArticle(Nullable<decimal> article_Id)
        {
            var article_IdParameter = article_Id.HasValue ?
                new ObjectParameter("Article_Id", article_Id) :
                new ObjectParameter("Article_Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteArticle", article_IdParameter);
        }
    
        public virtual int usp_DeleteStore(Nullable<decimal> store_Id)
        {
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("Store_Id", store_Id) :
                new ObjectParameter("Store_Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteStore", store_IdParameter);
        }
    
        public virtual ObjectResult<usp_ReadStore_Result> usp_ReadStore(Nullable<decimal> store_Id)
        {
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("Store_Id", store_Id) :
                new ObjectParameter("Store_Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReadStore_Result>("usp_ReadStore", store_IdParameter);
        }
    
        public virtual int usp_UpdateArticle(Nullable<decimal> article_Id, string description, Nullable<decimal> price, Nullable<decimal> total_in_shelf, Nullable<decimal> total_in_vault, Nullable<decimal> store_Id)
        {
            var article_IdParameter = article_Id.HasValue ?
                new ObjectParameter("Article_Id", article_Id) :
                new ObjectParameter("Article_Id", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var total_in_shelfParameter = total_in_shelf.HasValue ?
                new ObjectParameter("Total_in_shelf", total_in_shelf) :
                new ObjectParameter("Total_in_shelf", typeof(decimal));
    
            var total_in_vaultParameter = total_in_vault.HasValue ?
                new ObjectParameter("Total_in_vault", total_in_vault) :
                new ObjectParameter("Total_in_vault", typeof(decimal));
    
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("Store_Id", store_Id) :
                new ObjectParameter("Store_Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateArticle", article_IdParameter, descriptionParameter, priceParameter, total_in_shelfParameter, total_in_vaultParameter, store_IdParameter);
        }
    
        public virtual int usp_UpdateStore(Nullable<decimal> store_Id, string name, string address)
        {
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("Store_Id", store_Id) :
                new ObjectParameter("Store_Id", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateStore", store_IdParameter, nameParameter, addressParameter);
        }
    
        public virtual ObjectResult<usp_ReadArticles_Result> usp_ReadArticles(Nullable<decimal> article_Id, Nullable<decimal> store_Id)
        {
            var article_IdParameter = article_Id.HasValue ?
                new ObjectParameter("Article_Id", article_Id) :
                new ObjectParameter("Article_Id", typeof(decimal));
    
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("Store_Id", store_Id) :
                new ObjectParameter("Store_Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReadArticles_Result>("usp_ReadArticles", article_IdParameter, store_IdParameter);
        }
    }
}
